;; -*- mode: scheme; -*-
;; Farm Crap App Pro Copyright (C) 2016 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define date (js "new Date();"))
(define date-day (date.getDate))
(define date-month (date.getMonth))
(define date-year (date.getYear))
(define (equal? a b) (eq? a b))
(define (round a) (Math.round a))
(define (number->string a) (+ "" a))

(define (padcash->string a)
  (let ((t (+ (rounding-cash a) 0.001)))
    (number->string (t.toFixed 2))))

(load "scm/decision.jscm")
(load "scm/manure.jscm")
(load "scm/calc-core.jscm")
(load "scm/translations.jscm")

(define i18n-lang 0)
(define (mtext-lookup id)
  (define (_ l)
    (cond
     ((null? l) (string-append (symbol->string id) " not translated"))
     ((eq? (car (car l)) id)
      (let ((translations (cadr (car l))))
        (if (<= (length translations) i18n-lang)
            (string-append (symbol->string id) " not translated")
            (let ((r (list-ref translations i18n-lang)))
              (if (or (equal? r "") (equal? r " "))
                  (list-ref translations 0) r)))))
     (else (_ (cdr l)))))
  (_ i18n-text))

(define (get-options t l)
  (map
   (lambda (q)
     (list (mtext-lookup q) (symbol->string q)))
   l))

(define the-current-units 'metric)
(define (current-units) the-current-units)
(define (update-current-units u) (set! the-current-units u))

(define (run-calc)
  (msg (convert-output (calc-amount calc) (get-units)))
  (let ((nutrients (calc-nutrients calc)))
    (update-dom "#nout" (convert-output (list-ref nutrients 0) "kg/ha"))
    (update-dom "#pout" (convert-output (list-ref nutrients 1) "kg/ha"))
    (update-dom "#kout" (convert-output (list-ref nutrients 2) "kg/ha"))
    (update-dom "#amount" (string-append (convert-output (calc-amount calc) (get-units)) " " (get-units)))
    (update-dom "#ncost" (string-append (get-cost-string-from-nutrient 0 nutrients 1)))
    (update-dom "#pcost" (string-append (get-cost-string-from-nutrient 1 nutrients 1)))
    (update-dom "#kcost" (string-append (get-cost-string-from-nutrient 2 nutrients 1)))
    ))

(define (update-units-text)
  (cond 
   ((eq? (current-units) 'metric)
    (update-dom "#ntitle" "N kg/ha")
    (update-dom "#ptitle" "P<sub>2</sub>O<sub>5</sub> kg/ha")
    (update-dom "#ktitle" "K<sub>2</sub>O kg/ha"))
   (else 
    (update-dom "#ntitle" "N units/acre")
    (update-dom "#ptitle" "P<sub>2</sub>O<sub>5</sub> units/acre")
    (update-dom "#ktitle" "K<sub>2</sub>O units/acre"))))

(connect-select
 "#units" (lambda (v) 
	    (update-current-units (string->symbol v))
	    (update-units-text)
	    (run-calc)))

(connect-select
 "#type" (lambda (v) 
	   (let ((v (string->symbol v)))
	     (set! calc (calc-modify-type calc v))
	     (set! calc (calc-modify-quality calc (car (get-qualities-for-type v))))
	     (update-options "#quality" (get-options v (get-qualities-for-type v)))
	     
	     (msg v)
	     (get-options v (get-application-for-type v))

	     (update-options "#application" (get-options v (get-application-for-type v)))
	     (run-calc))))

(connect-select
 "#quality" 
 (lambda (v) 
   (set! calc (calc-modify-quality calc (string->symbol v)))
   (run-calc)))

(connect-select
 "#application" 
 (lambda (v) 
   (set! calc (calc-modify-application calc (string->symbol v)))
   (run-calc)))

(connect-select
 "#crop" 
 (lambda (v) 
   (set! calc (calc-modify-crop calc (string->symbol v)))
   (run-calc)))

(connect-select
 "#soil" 
 (lambda (v) 
   (set! calc (calc-modify-soil calc (string->symbol v)))
   (run-calc)))

(connect-select
 "#season" 
 (lambda (v) 
   (set! calc (calc-modify-season calc (string->symbol v)))
   (run-calc)))

(connect-slider 
 "#quantity" 
 (lambda (v)
   (msg (current-seek-mul))
   (set! calc 
	 (calc-modify-amount 
	  calc 
	  (* (current-seek-mul) v)))
   (run-calc)))

(update-units-text)
(run-calc)
